//  https://leetcode.com/problems/meeting-scheduler/

class Solution {
    public List<Integer> minAvailableDuration(int[][] slots1, int[][] slots2, int duration) {
        // 2491 ms, faster than 5.04%
        // 48.3 mb, less than 51.77%
        // Solved in 28 minutes 
        
        // sorts slots1 and slots2 by the first element of each inner array
        Arrays.sort(slots1, (x, y) -> x[0] - y[0]);
        Arrays.sort(slots2, (x, y) -> x[0] - y[0]);
        
        // i'm brute forcing it
        // compare each slot in slot1 to each slot in slot2 until a solution is found
        for(int i = 0; i < slots1.length; i++) {
            for(int j = 0; j < slots2.length; j++) {
                if(isScheduleMatch(slots1[i], slots2[j], duration)) {
                    int start = Math.max(slots1[i][0], slots2[j][0]);
                    return new ArrayList<Integer>(Arrays.asList(start, start + duration));
                }
            }
        }
        
        return new ArrayList<>();
    }
    
    public boolean isScheduleMatch(int[] slot1, int[] slot2, int duration) {
        int startOfMeet = -1, endOfMeet = -1;
        if(slot1[0] >= slot2[0]) {
            startOfMeet = slot1[0];
            endOfMeet = Math.min(slot1[1], slot2[1]);
        }
        else {
            startOfMeet = slot2[0];
            endOfMeet = Math.min(slot1[1], slot2[1]);
        }
        
        if(endOfMeet - startOfMeet <= 0)  // no intersection at all
            return false;
            
        return (endOfMeet - startOfMeet) >= duration;
    }
}
/*
Sample input:
[[10,50],[60,120],[140,210]]
[[0,15],[60,70]]
8
[[60,120],[140,210],[10,50]]
[[60,70],[0,15],[71,72],[5,10]]
8
[[0,2]]
[[1,3]]
1

*/
