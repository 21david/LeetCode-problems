// Time limit exceeded (passes 314/315)

class Solution {
    public int trap(int[] height) {
        
        if(height.length == 0)
            return 0;
        
        // find the maximum to know the height of the blocks
        int max = height[0];
        for(int i = 1; i < height.length; i++)
        {
            if(height[i] > max)
                max = height[i];
        }
        
        
      //  System.out.println(Arrays.deepToString(map).replace("],","\n"));
        
        int count = 0;
        
        // iterate through array for each row
        for(int r = 1; r <= max; r++)
        {
            // for the first row, check to the left and to the right
            // looking for a 1 or greater
            for(int c = 1; c < height.length - 1; c++)
            {
               if(height[c] < r && canHoldWater(height, r, c))
                   count++;
            }
        }
        
        return count;
    }
    
    public boolean canHoldWater(int[] height, int targetHeight, int c)
    {
      //  System.out.println(r + " " + c);
        
        boolean boxToTheRight = false;
        boolean boxToTheLeft = false;
        
        int c2 = c;
        
        // look to the right
        for(; c2 < height.length; c2++)
        {
           // System.out.println("Loop: " + map[r][c2] + ", " + r  + ", " + c2);
            if(height[c2] >= targetHeight)
            {
                boxToTheRight = true;
                break;
            }
        }
        
        // look to the left
        for(; c >= 0; c--)
        {
            if(height[c] >= targetHeight)
            {
                boxToTheLeft = true;
                break;
            }
        }
        
      //  System.out.println(boxToTheLeft + " " + boxToTheRight);
        
        return boxToTheRight && boxToTheLeft;
    }
}
