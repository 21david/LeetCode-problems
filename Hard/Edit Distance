class Solution {
    /*
    7 ms, faster than 23.75%
    41.2 MB, less than 5.00%
    */
    public int minDistance(String word1, String word2) {
        if(word1.length() == 0)
            return word2.length();
        else if(word2.length() == 0)
            return word1.length();
        
        int[][] dp = new int[word1.length() + 1][word2.length() + 1];
        
        for(int i = 0; i <= word1.length(); i++)
            dp[i][0] = i;
        
        for(int i = 0; i <= word2.length(); i++)
            dp[0][i] = i;
        
        for(int r = 1; r <= word1.length(); r++)
        {
            for(int c = 1; c <= word2.length(); c++)
            {
                if(word1.charAt(r-1) == word2.charAt(c-1)) // if they are equal
                    dp[r][c] = dp[r-1][c-1];
                else
                    dp[r][c] = min(dp[r-1][c-1], dp[r-1][c], dp[r][c-1]) + 1;
            }
        }
        
        return dp[word1.length()][word2.length()];
    }
    
    public static int min(int... args)
    {
        int min = args[0];
        
        for(int i = 1; i < args.length; i++)
            if(min > args[i])
                min = args[i];
        
        return min;
    }
}
