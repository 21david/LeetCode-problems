
class Solution {
    public int singleNonDuplicate(int[] nums) {
        if(nums.length == 1)
            return nums[0];
        
        int numRepeating = (nums.length - 1) / 2;
        
        int low = 0;
        int high = nums.length - 1;
        int med = (high+low) / 2;
        
        
        // check if current one is single element
        if(nums[med] != nums[med - 1] 
        && nums[med] != nums[med + 1])
            return nums[med];
        
        
        boolean leftOrRight = false;
        
        boolean found = false;
        
        while(!found)
        {
            
            // check if current one is single element
            if(nums[med] != nums[med - 1] 
            && nums[med] != nums[med + 1])
                return nums[med];
            
            
            if(nums[med] == nums[med - 1]) // matches with left
            {
                // if repeating numbers is even
                if(numRepeating % 2 == 0) // single element is to the left
                    leftOrRight = true;
                else
                    leftOrRight = false;
            }
            else // matches with right
            {
                // if repeating numbers is even
                if(numRepeating % 2 == 0) // single element is to the right
                    leftOrRight = false;
                else
                    leftOrRight = true;
            }
            
            
            
            if(leftOrRight) // left if true
            {
                high = med - 1;
            }
            else // right
            {
                low = med + 1;
            }
            
            med = (high + low) / 2;
            
        }
        
        
        
        return nums[med];
    }
    
    
    /*
    
    1 1 5 2 2 3 3 4 4
    
    1 1 2 2 3 3 4 4 5
    
    5 1 1 2 2 3 3
    
    1 1 2 2 5 3 3
    
    
    */
    
/*
        HashMap<Integer, Integer> map = new HashMap<>();
        
        // iterate through the array, add each element to the muiltiset
        for(int i = 0; i < nums.length; i++)
        {
            if(map.containsKey(nums[i]))
                map.put(nums[i], map.get(nums[i]) + 1);
            else
                map.put(nums[i], 1);
        }
        
        Iterator<Integer> it = map.keySet().iterator();
            
        while(it.hasNext())
        {
            int key =  it.next() ;
            if(map.get(key) == 1)
                return key;
                
        }
        
        return 0;
        
    }
    */
}
